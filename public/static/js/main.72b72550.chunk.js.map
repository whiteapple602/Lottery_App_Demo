{"version":3,"sources":["logo.svg","web3.js","lottery.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","web3","Web3","window","currentProvider","eth","Contract","App","state","manager","players","balance","value","message","onSubmit","event","a","preventDefault","ethereum","enable","getAccounts","accounts","setState","lottery","methods","enter","send","from","utils","toWei","onClick","pickWinner","call","getPlayers","getBalance","options","address","this","length","fromWei","onChange","target","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.72b72550.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import Web3 from 'web3';\n\nconst web3 = new Web3(window.web3.currentProvider);\n\nexport default web3;\n","import web3 from './web3';\n\nconst address = '0x8C9815E2372bC6F9Dec915751B31666aB08b2edb';\n\nconst abi = [{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pickWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"random\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlayers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"enter\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}];\n\nexport default new web3.eth.Contract(abi, address);\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport web3 from './web3';\nimport lottery from './lottery';\n\nclass App extends React.Component {\n  state = { manager: '', players: [], balance: '', value: '', message: '' };\n  \n  async componentDidMount() {\n    const manager = await lottery.methods.manager().call();\n    const players = await lottery.methods.getPlayers().call();\n    const balance = await web3.eth.getBalance(lottery.options.address);\n    this.setState({ manager, players, balance });\n  }\n\n  onSubmit = async (event) => {\n    event.preventDefault();\n    await window.ethereum.enable();\n    const accounts = await web3.eth.getAccounts();\n    this.setState({ message: 'Transaction is processing...' });\n    await lottery.methods.enter().send({\n      from: accounts[0],\n      value: web3.utils.toWei(this.state.value, 'ether')\n    });\n    this.setState({ message: 'You entered to the lottery' });\n  };\n\n  onClick = async () => {\n    await window.ethereum.enable();\n    const accounts = await web3.eth.getAccounts();\n    this.setState({ message: 'Transaction is processing...' });\n    await lottery.methods.pickWinner().send({\n      from: accounts[0]\n    });\n    this.setState({ message: 'Winner picked' });\n  };\n\n  render() {\n    return (\n      <div>\n        <h2>Lottery Contract</h2>\n        <p>\n          This contract is managed by: {this.state.manager} <br />\n          There are currently {this.state.players.length} people entered, \n          competing to win {web3.utils.fromWei(this.state.balance, 'ether')} ether!\n        </p>\n\n        <hr />\n\n        <form onSubmit={this.onSubmit}>\n          <h4>Want to try your luck</h4>\n          <div>\n            <label>Amount of ether to enter</label>\n            <input \n              value={this.state.value}\n              onChange={event => this.setState({ value: event.target.value })}\n            />\n          </div>\n          <button>Enter</button>\n        </form>\n        <hr />\n        <h4>Ready to pick a winner?</h4>\n        <button onClick={this.onClick}>Pick a winner</button>\n        <hr />\n        <h1>{ this.state.message }</h1>\n      </div>\n    );\n  }\n}\n\nexport default App;\n ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}